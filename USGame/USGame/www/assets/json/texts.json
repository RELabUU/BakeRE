{
  "Introductions": {
    "lvl0": [
      "Welcome to the BakeRE! Within this game, you produce userstories by making cakes. Userstories are sentences in the following format: 'As a <Role> I want to <Action> so that <Benefit>'. This is a very useful tool within the realm of Requirements Engineering, as they are short, to the point and readable, without losing important information.@But back to the game; within BakeRE, every cake consists of three ingredients - a cakebase, icing and some decorations. This mirrors the makeup of a userstory with their Role-Action-Benefit setup.@To complete a batch of cakes, you have to complete all correct userstories within that batch. To complete a level, you have to complete all batches within the level! The amount of userstories and batches yet to complete can be seen to the left of the screen (show progressbar)."
    ],
    "lvl1": [
      "Welcome back! It is time for the next level. Within this level, the focus lies on correct userstory structure. As was briefly explained in the tutorial, a userstory has the following structure: 'As a <Role> I want to <Action> so that <Benefit>'.@You will find that in normal use, a benefit is occasionally an optional addition. However, in the BakeRE, every cake needs a decoration. Therefore, for our purposes, every userstory has three parts.@Please read the context at the start of each level very carefully and empty all batches by matching the correct userstories! When in doubt, you can always review the context again by clicking on the button at the top of the screen. Good luck!"
    ],
    "lvl2": [
      "Hello again! Let’s continue on to the next stage. Within these next few levels, we will introduce faulty userstories. These userstories are within the batches, but should not be completed and do not count towards finishing a level. This is because they do not conform to specific Quality Frameworks. A quality framework is, as the name suggests, a framework that can be used to assure high userstory quality.@When conforming to a quality framework, the userstory becomes as clear and concise as possible, but does not tip over to the other side and become overly small and vague.The framework that we focus on within this game is called the 'Quality Userstory Framework' or 'QUS' for short. QUS consists of 11 criteria, but within this game we will only focus on 7 of them.@The first of these criteria, 'Well-formed' (does every userstory contain at least a Role-Action-Benefit) we have already tackled in the levels beforehand. Within this level, we will introduce 3 more; Atomic, Minimal and Problem Oriented. @An Atomic userstory only tackles one problem at a time. For example; 'As a student, I want to see my grades and communicate with my teacher about these grades, so that...' is not atomic, as it tackles two different problems within one userstory.@Next, a Minimal userstory contains nothing more than a Role, an Action and a Benefit. For example, 'As a student, I want to see my progress (some examples include grades, tests, descriptions etc.), so that...' is not minimal, as it includes additional information that is not a Role, an Action nor a Benefit.@Finally, a Problem Oriented userstory only specifies the problem and not the solution to it. For example, 'As a student, I want to see my grades within an Excel sheet, so that...' is not Problem Oriented, as it includes the Excel sheet solution instead of simply stating the problem.@Try to finish the next set of batches without making any of these mistakes. When you are unsure about the criteria, check them again by clicking the context button at the top of the screen. Good luck!"
    ],
    "lvl3": [
      "Hey there! In this level, we continue with the QUS framework by introducing 3 more criteria; Full Sentence, Unambiguous and Independent. Let's jump right into it, shall we? @A Full Sentence userstory is, as the name implies, a correct, well-formed full sentence. For example; 'As a student, I want to see grades, so that progress' is not a full sentence userstory, as it is not a well-formed english sentence.@Next, an unambiguous userstory is a userstory that clearly describes its parts without introducing any ambiguity. For example; 'As a student, I want to see the grades, so that I know how I'm doing' is not an unambiguous userstory, as it's very vague on which grades it means and what exactly the student wishes to gain from seeing these grades.@Finally, an Independent userstory does not depend on other userstories within the list to make a point. For example, 'As a student, I want to see my grades (as described in US7), so that...' is not an independent userstory, as it depends on another userstory (userstory 7), to explain its purpose.@Once again, complete all correct userstories within the batches without accidentally creating any of the faulty userstories to finish this level. Good luck!"
    ],
    "lvl4": [
      "Nice to see you again! For this final level, we are going to look at something other than userstories, but closely related; acceptance tests. These tests are a method of checking whether or not a userstory has been implemented correctly. Acceptance tests do not have such a set structure as userstories, but one of the most popular structures is the following; 'Given <some context>, When <some action is carried out>, Then <some observable consequence occurs>'. @These will be your new cake parts, so your cakebases will be the 'Given', the icing will be the 'When' and the decorations will be the 'Then'. Try to make the correct acceptance tests given the context (which is a userstory in this case). Just like before, complete the batches to complete the level. There are no more mistakes within this level, every acceptance test in the batch must be completed. Good luck!"
    ]
  },
  "Tips": {
    "Well Formed": "When creating your userstories, always make sure that there is a Role, an Action and a Benefit - and that these match with each other! Reread the context carefully when you are unsure of the possible matches.",
    "Atomic": "Make sure that your userstories only tackle one issue at a time. A tell to look for is the word 'and' within either an action or a benefit; I want to do this <and> this usually points towards multiple problems within one userstory - therefore not atomic!",
    "Minimal": "Make sure that your userstories contain only a role, an action and a benefit. If a userstory contains additional information such as examples and extra descriptions, a userstory is not mimimal.",
    "Problem Oriented": "Always check if your userstories only specify problems, not solutions. If any of your userstories include specific solutions, program names, resources etc, it is most likely not problem oriented!",
    "Full Sentence": "Always read the userstory while making it and check if it makes grammatical sense as a sentence. Does this sound like a natural English sentence? Are their any random words without context?",
    "Unambiguous": "When creating your userstories, make sure that the descriptors are specific enough. Do you have phrases or words like 'thingss' or 'the duties' that are too vague and could mean anything? Then the userstory is not unambiguous!",
    "Independent": "Make sure that your userstories stand on their own. When you see a pointer towards another userstory (e.g. 'please see userstory 8' or 'check the pdf'), your userstory is not independent as it depends on these other files!"
  },
  "Criteria": {
    "lvl2": [
      "An Atomic userstory only tackles one problem at a time. For example; 'As a student, I want to see my grades and ",
      "communicate with my teacher about these grades, so that...' is not atomic, as it tackles two different problems within one userstory. ",
      "",
      "Next, a Minimal userstory contains nothing more than a Role, an Action and a Benefit. ",
      "For example, 'As a student, I want to see my progress (some examples include grades, tests, descriptions etc.), ",
      "so that...' is not minimal, as it includes additional information that is not a Role, an Action nor a Benefit. ",
      "",
      "Finally, a Problem Oriented userstory only specifies the problem and not the solution to it. For example, 'As a student, ",
      "I want to see my grades within an Excel sheet, so that...' is not Problem Oriented, as it includes the Excel sheet solution ",
      "instead of simply stating the problem. "
    ],
    "lvl3": [
      "A Full Sentence userstory is, as the name implies, a correct, well-formed full sentence. For example; 'As a student, ",
      "I want to see grades, so that progress' is not a full sentence userstory, as it is not a well-formed english sentence. ",
      "",
      "Next, an unambiguous userstory is a userstory that clearly describes its parts without introducing any ambiguity. ",
      "For example; 'As a student, I want to see the grades, so that I know how I'm doing' is not an unambiguous userstory, ",
      "as it's very vague on which grades it means and what exactly the student wishes to gain from seeing these grades. ",
      "",
      "Finally, an Independent userstory does not depend on other userstories within the list to make a point. ",
      "For example, 'As a student, I want to see my grades (as described in US7), so that...' is not an independent userstory, as ",
      "it depends on another userstory (userstory 7), to explain its purpose. "
    ]
  }
}